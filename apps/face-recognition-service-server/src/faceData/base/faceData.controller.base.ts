/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FaceDataService } from "../faceData.service";
import { FaceDataCreateInput } from "./FaceDataCreateInput";
import { FaceData } from "./FaceData";
import { FaceDataFindManyArgs } from "./FaceDataFindManyArgs";
import { FaceDataWhereUniqueInput } from "./FaceDataWhereUniqueInput";
import { FaceDataUpdateInput } from "./FaceDataUpdateInput";

export class FaceDataControllerBase {
  constructor(protected readonly service: FaceDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FaceData })
  async createFaceData(
    @common.Body() data: FaceDataCreateInput
  ): Promise<FaceData> {
    return await this.service.createFaceData({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        facialFeatures: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FaceData] })
  @ApiNestedQuery(FaceDataFindManyArgs)
  async faceDataItems(@common.Req() request: Request): Promise<FaceData[]> {
    const args = plainToClass(FaceDataFindManyArgs, request.query);
    return this.service.faceDataItems({
      ...args,
      select: {
        createdAt: true,
        facialFeatures: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FaceData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async faceData(
    @common.Param() params: FaceDataWhereUniqueInput
  ): Promise<FaceData | null> {
    const result = await this.service.faceData({
      where: params,
      select: {
        createdAt: true,
        facialFeatures: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FaceData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFaceData(
    @common.Param() params: FaceDataWhereUniqueInput,
    @common.Body() data: FaceDataUpdateInput
  ): Promise<FaceData | null> {
    try {
      return await this.service.updateFaceData({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          facialFeatures: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FaceData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFaceData(
    @common.Param() params: FaceDataWhereUniqueInput
  ): Promise<FaceData | null> {
    try {
      return await this.service.deleteFaceData({
        where: params,
        select: {
          createdAt: true,
          facialFeatures: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
