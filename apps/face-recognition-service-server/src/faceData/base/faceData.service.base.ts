/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FaceData as PrismaFaceData,
  User as PrismaUser,
} from "@prisma/client";

export class FaceDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FaceDataCountArgs, "select">): Promise<number> {
    return this.prisma.faceData.count(args);
  }

  async faceDataItems<T extends Prisma.FaceDataFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceDataFindManyArgs>
  ): Promise<PrismaFaceData[]> {
    return this.prisma.faceData.findMany<Prisma.FaceDataFindManyArgs>(args);
  }
  async faceData<T extends Prisma.FaceDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceDataFindUniqueArgs>
  ): Promise<PrismaFaceData | null> {
    return this.prisma.faceData.findUnique(args);
  }
  async createFaceData<T extends Prisma.FaceDataCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceDataCreateArgs>
  ): Promise<PrismaFaceData> {
    return this.prisma.faceData.create<T>(args);
  }
  async updateFaceData<T extends Prisma.FaceDataUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceDataUpdateArgs>
  ): Promise<PrismaFaceData> {
    return this.prisma.faceData.update<T>(args);
  }
  async deleteFaceData<T extends Prisma.FaceDataDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceDataDeleteArgs>
  ): Promise<PrismaFaceData> {
    return this.prisma.faceData.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.faceData
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
